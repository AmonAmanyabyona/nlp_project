#user_iteraction8.py
import streamlit as st
from autocomplete_search5 import search_quotes
from audio_file_search7 import transcribe_audio, convert_to_wav
from chat_completion import chat_with_rag
# from second_model import chat_with_rag

import os
from datetime import datetime
import ffmpeg
from gtts import gTTS
import tempfile

# 📐 Page setup
st.set_page_config(page_title="Wikiquote Chatbot", layout="centered")
st.title("🧠 Wikiquote Chatbot")
st.write("Search inspirational quotes and chat with context using GPT-4o.")

# 🗂️ Create audio directory
AUDIO_DIR = "spoken_words"
os.makedirs(AUDIO_DIR, exist_ok=True)

# 🗣️ TTS Function
def generate_speech(text):
    tts = gTTS(text, lang="en")
    temp_audio = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
    tts.save(temp_audio.name)
    return temp_audio.name

# 🕒 Speed adjustment using ffmpeg
def adjust_speed(input_path, speed=1.0):
    output_path = input_path.replace(".mp3", f"_speed{speed}.mp3")
    try:
        (
            ffmpeg
            .input(input_path)
            .filter("atempo", speed)
            .output(output_path)
            .overwrite_output()
            .run(quiet=True)
        )
        return output_path
    except ffmpeg.Error:
        return input_path  # fallback
    

# 🔄 Session state setup
if "chat_completed" not in st.session_state:
    st.session_state.chat_completed = False

# 🎛️ Choose input method
mode = st.radio("Choose input method:", ["Text", "Audio"])

# ✍️ TEXT MODE
if mode == "Text" and not st.session_state.chat_completed:
    query = st.text_input("Type your question or phrase:")
    if query:
        quotes = search_quotes(query)
        if quotes:
            st.subheader("📚 Matching Quotes")
            for q in quotes:
                st.markdown(f"> **{q['author']}**: \"{q['quote']}\"\n> _(Score: {q['score']:.2f})_")

            if st.button("🔮 Get Chatbot Response"):
                response = chat_with_rag(query, quotes)
                st.subheader("💬 Chatbot Response")
                st.write(response)

                # 🔊 Audio response
                audio_path = generate_speech(response)
                st.audio(audio_path, format="audio/mp3")

                if st.button("🔁 Start Over"):
                    st.session_state.chat_completed = False
                    st.experimental_rerun()
                else:
                    st.session_state.chat_completed = True
        else:
            st.warning("No matching quotes found.")

# 🎙️ AUDIO MODE
elif mode == "Audio" and not st.session_state.chat_completed:
    audio_file = st.audio_input("🎤 Speak your question or message:")

    if audio_file:
        audio_index = len(os.listdir(AUDIO_DIR)) + 1
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        raw_path = os.path.join(AUDIO_DIR, f"audio{audio_index}_{timestamp}_raw.wav")

        with open(raw_path, "wb") as f:
            f.write(audio_file.getbuffer())
        st.success(f"✅ Audio saved as `{os.path.basename(raw_path)}`")
        st.audio(audio_file, format="audio/wav")

        clean_path = os.path.join(AUDIO_DIR, f"audio{audio_index}_{timestamp}.wav")
        try:
            (
                ffmpeg
                .input(raw_path)
                .output(clean_path, format='wav', ac=1, ar=16000)
                .overwrite_output()
                .run(quiet=True)
            )
        except ffmpeg.Error as e:
            st.error("Audio conversion failed.")
            st.stop()

        if not os.path.exists(clean_path):
            st.error("Converted file not found.")
            st.stop()

        transcribed_query = transcribe_audio(clean_path)
        st.subheader("📝 Transcribed Text")
        st.write(transcribed_query)

        quotes = search_quotes(transcribed_query)
        if quotes:
            st.subheader("📚 Matching Quotes")
            for q in quotes:
                st.markdown(f"> **{q['author']}**: \"{q['quote']}\"\n> _(Score: {q['score']:.2f})_")

            if st.button("🔮 Get Chatbot Response"):
                response = chat_with_rag(transcribed_query, quotes)
                st.subheader("💬 Chatbot Response")
                st.write(response)

                # 🎛️ Playback speed control
                speed = st.slider("🕒 Playback Speed", 0.5, 2.0, 1.0, 0.1)

                # 🔊 Generate and adjust speech
                audio_path = generate_speech(response)
                adjusted_path = adjust_speed(audio_path, speed)
                st.audio(adjusted_path, format="audio/mp3")


#The audios generated by the gTTS Text-to-Speech function are temporarily saved in system using Python’s tempfile module 
#bbut now below i want to delete them
                # 🧽 Clean up audio files after use
                for path in [audio_path, adjusted_path]:
                    try:
                        os.remove(path)
                    except:
                        st.warning(f"Could not delete file: {path}")

                if st.button("🔁 Start Over"):
                    st.session_state.chat_completed = False
                    st.experimental_rerun()
                else:
                    st.session_state.chat_completed = True
        else:
            st.warning("No matching quotes found.")
